name: Package
on:
  push:
    branches: [ master ]
    tags-ignore: [ updater ]

jobs:
  change-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.outputstep.outputs.VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install git
        run: |
          sudo apt-get update
          sudo apt-get install -y git
      - id: outputstep
        run: |
          echo "VERSION=$(git describe --tags | sed 's/\([^-]*-g\)/r\1/;s/-/./g' | sed 's/.r.*//g')" >> "$GITHUB_OUTPUT"
      - name: Change Version
        run: |
          sed -i "s/\"version\":.*/\"version\": \"$(git describe --tags | sed 's/\([^-]*-g\)/r\1/;s/-/./g' | sed 's/.\(r[0-9]\)/\-\1/')\",/g" package.json

          sed -i "s/\"version\":.*/\"version\": \"$(git describe --tags | sed 's/\([^-]*-g\)/r\1/;s/-/./g' |sed 's/.\(r[0-9]\)/\-\1/')\"/g" src-tauri/tauri.conf.json

          sed -i "s/version = \"0.0.0\"/version = \"$(git describe --tags | sed 's/\([^-]*-g\)/r\1/;s/-/./g' |sed 's/.\(r[0-9]\)/\-\1/')\"/g" src-tauri/Cargo.toml

          echo $(git describe --tags | sed 's/\([^-]*-g\)/r\1/;s/-/./g' | sed 's/.\(r[0-9]\)/\-\1/')

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: source
          path: ./*
          if-no-files-found: error

  change-version-for-windows:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.outputstep.outputs.VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install git
        run: |
          sudo apt-get update
          sudo apt-get install -y git
      - id: outputstep
        run: |
          echo "VERSION=$(git describe --tags | sed 's/\([^-]*-g\)/r\1/;s/-/./g' | sed 's/.r.*//g')" >> "$GITHUB_OUTPUT"
      - name: Change Version for Windows
        run: |
          sed -i "s/\"version\":.*/\"version\": \"$(git describe --tags | sed 's/\([^-]*-g\)/r\1/;s/-/./g' | sed 's/.r.*//g')\",/g" package.json

          sed -i "s/\"version\":.*/\"version\": \"$(git describe --tags | sed 's/\([^-]*-g\)/r\1/;s/-/./g' | sed 's/.r.*//g')\"/g" src-tauri/tauri.conf.json

          sed -i "s/version = \"0.0.0\"/version = \"$(git describe --tags | sed 's/\([^-]*-g\)/r\1/;s/-/./g' | sed 's/.r.*//g')\"/g" src-tauri/Cargo.toml

          echo $(git describe --tags | sed 's/\([^-]*-g\)/r\1/;s/-/./g' | sed 's/.r.*//g')

      - name: Upload Artifacts for Windows
        uses: actions/upload-artifact@v3
        with:
          name: source-win
          path: ./*
          if-no-files-found: error

  build-extension:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Build Popclipext
        run: |
          cd popclip
          bash ./build.sh
          cd ..
      - name: Build SnipDo
        run: |
          cd snipdo
          bash ./build.sh
          cd ..
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: Pot.popclipextz
          path: popclip/Pot.popclipextz
          if-no-files-found: error
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: pot.pbar
          path: snipdo/pot.pbar
          if-no-files-found: error
      - name: Upload Release
        if: startsWith(github.ref, 'refs/tags')
        uses: softprops/action-gh-release@v1
        with:
          body_path: CHANGELOG
          token: ${{ secrets.TOKEN }}
          files: popclip/Pot.popclipextz
      - name: Upload Release
        if: startsWith(github.ref, 'refs/tags')
        uses: softprops/action-gh-release@v1
        with:
          body_path: CHANGELOG
          token: ${{ secrets.TOKEN }}
          files: snipdo/pot.pbar
  build-for-macos:
    needs: change-version
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest]
        target: [aarch64-apple-darwin, x86_64-apple-darwin]

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: source
      - name: Setup Nodejs
        uses: actions/setup-node@v3
        with:
          node-version: 19
      - name: Install Rust Stable
        uses: dtolnay/rust-toolchain@stable
      - name: install dependencies
        run: |
          rustup target add ${{ matrix.target }}
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Install Dependencies
        run: pnpm install
      - name: Code Format
        run: pnpm prettier --write .
      - name: Change tray icon
        run: |
          sed -i '' "s/\"iconPath\":.*/\"iconPath\": \"icons\/tray.ico\",/g" src-tauri/tauri.conf.json
      - name: Build and Package
        run: |
          export TAURI_PRIVATE_KEY="${{ secrets.TAURI_PRIVATE_KEY }}"
          export TAURI_KEY_PASSWORD="${{ secrets.TAURI_KEY_PASSWORD }}"
          pnpm tauri build --target ${{ matrix.target }}
      - name: Change File Name
        if: matrix.target == 'aarch64-apple-darwin'
        run: |
          sudo mv src-tauri/target/aarch64-apple-darwin/release/bundle/macos/pot.app.tar.gz src-tauri/target/aarch64-apple-darwin/release/bundle/macos/pot_${{needs.change-version.outputs.version}}_aarch64.app.tar.gz
          sudo mv src-tauri/target/aarch64-apple-darwin/release/bundle/macos/pot.app.tar.gz.sig src-tauri/target/aarch64-apple-darwin/release/bundle/macos/pot_${{needs.change-version.outputs.version}}_aarch64.app.tar.gz.sig
      - name: Change File Name
        if: matrix.target == 'x86_64-apple-darwin'
        run: |
          sudo mv src-tauri/target/x86_64-apple-darwin/release/bundle/macos/pot.app.tar.gz src-tauri/target/x86_64-apple-darwin/release/bundle/macos/pot_${{needs.change-version.outputs.version}}_x64.app.tar.gz
          sudo mv src-tauri/target/x86_64-apple-darwin/release/bundle/macos/pot.app.tar.gz.sig src-tauri/target/x86_64-apple-darwin/release/bundle/macos/pot_${{needs.change-version.outputs.version}}_x64.app.tar.gz.sig
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: pot_${{ matrix.target }}.dmg
          path: src-tauri/target/${{ matrix.target }}/release/bundle/dmg/*.dmg
          if-no-files-found: error
      - name: Upload Release
        if: startsWith(github.ref, 'refs/tags')
        uses: softprops/action-gh-release@v1
        with:
          body_path: CHANGELOG
          token: ${{ secrets.TOKEN }}
          files: src-tauri/target/${{ matrix.target }}/release/bundle/dmg/*.dmg
      - name: Upload Release
        if: startsWith(github.ref, 'refs/tags')
        uses: softprops/action-gh-release@v1
        with:
          body_path: CHANGELOG
          token: ${{ secrets.TOKEN }}
          files: src-tauri/target/${{ matrix.target }}/release/bundle/macos/*.app*

  build-for-linux:
    needs: change-version
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest]
        target: [x86_64-unknown-linux-gnu, i686-unknown-linux-gnu]
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: source
      - name: Setup Nodejs
        uses: actions/setup-node@v3
        with:
          node-version: 19
      - name: Install Rust Stable
        uses: dtolnay/rust-toolchain@stable
      - name: install dependencies
        run: |
          rustup target add ${{ matrix.target }}
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Install Dependencies
        run: |
          sudo dpkg --add-architecture i386 
          sudo apt update
          # FIX INSTALL FAILED ON GITHUB UBUNTU 22.04 RUNNER, see also https://github.com/actions/runner-images/issues/7606#issuecomment-1577821633
          sudo apt install -y libgcc-s1:i386 libstdc++6:i386 libgdk-pixbuf-2.0-dev:i386 libgdk-pixbuf2.0-dev:i386 libatomic1:i386
          sudo apt install -y gcc-multilib g++-multilib
          sudo apt install -y libwebkit2gtk-4.0-dev:i386 libssl-dev:i386 libgtk-3-dev:i386 librsvg2-dev:i386
          sudo apt install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf libxdo-dev libxcb1 libxrandr2 libdbus-1-3
      - name: Install Dependencies
        run: pnpm install
      - name: Code Format
        run: pnpm prettier --write .
      - name: Build and Package
        run: |
          export TAURI_PRIVATE_KEY="${{ secrets.TAURI_PRIVATE_KEY }}"
          export TAURI_KEY_PASSWORD="${{ secrets.TAURI_KEY_PASSWORD }}"
          if [[ "${{ matrix.target }}" == "i686-unknown-linux-gnu" ]]; then
            echo "configure PKG_CONFIG_PATH and PKG_CONFIG_SYSROOT_DIR for x86 target of tauri"
            export PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig/:$PKG_CONFIG_PATH
            export PKG_CONFIG_SYSROOT_DIR=/
          fi
          pnpm tauri build --target ${{ matrix.target }} -b deb
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: pot_${{ matrix.target }}.deb
          path: src-tauri/target/${{ matrix.target }}/release/bundle/deb/*.deb
          if-no-files-found: error
      - name: Upload Release
        if: startsWith(github.ref, 'refs/tags')
        uses: softprops/action-gh-release@v1
        with:
          body_path: CHANGELOG
          token: ${{ secrets.TOKEN }}
          files: src-tauri/target/${{ matrix.target }}/release/bundle/deb/*.deb
  build-for-windows:
    needs: change-version-for-windows
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest]
        target: [x86_64-pc-windows-msvc, i686-pc-windows-msvc, aarch64-pc-windows-msvc]

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: source-win
      - name: Setup Nodejs
        uses: actions/setup-node@v3
        with:
          node-version: 19
      - name: Install Rust Stable
        uses: dtolnay/rust-toolchain@stable
      - name: install dependencies
        run: |
          rustup target add ${{ matrix.target }}
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Install Dependencies
        run: pnpm install
      - name: Code Format
        run: pnpm prettier --write .
      - name: Build and Package
        run: |
          $env:TAURI_PRIVATE_KEY="${{ secrets.TAURI_PRIVATE_KEY }}"
          $env:TAURI_KEY_PASSWORD="${{ secrets.TAURI_KEY_PASSWORD }}"
          pnpm tauri build --target ${{ matrix.target }}
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: pot_${{ matrix.target }}.msi
          path: src-tauri/target/${{ matrix.target }}/release/bundle/msi/*.msi
          if-no-files-found: error
      - name: Upload Release
        if: startsWith(github.ref, 'refs/tags')
        uses: softprops/action-gh-release@v1
        with:
          body_path: CHANGELOG
          token: ${{ secrets.TOKEN }}
          files: src-tauri/target/${{ matrix.target }}/release/bundle/msi/*.msi*
      - name: Upload WinGet
        if: startsWith(github.ref, 'refs/tags') && matrix.target == 'x86_64-pc-windows-msvc'
        uses: vedantmgoyal2009/winget-releaser@v2
        with:
          identifier: Pylogmon.pot
          version: ${{needs.change-version-for-windows.outputs.version}}
          installers-regex: '\.msi$'
          token: ${{ secrets.TOKEN }}
          fork-user: Pylogmon
        continue-on-error: true
  build-for-deepin:
    needs: change-version
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest]
        target: [universal]
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: source
      - name: Build for Deepin
        uses: ./actions/build-for-deepin
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
      - name: Change Name
        run: |
          name=$(ls src-tauri/target/release/bundle/deb/*.deb)
          new_name=${name%.*}_${{ matrix.target }}.deb
          sudo mv src-tauri/target/release/bundle/deb/*.deb ${new_name}
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: pot_${{ matrix.target }}.deb
          path: src-tauri/target/release/bundle/deb/*.deb
          if-no-files-found: error
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: pot.AppImage
          path: src-tauri/target/release/bundle/appimage/*.AppImage
          if-no-files-found: error
      - name: Upload Release
        if: startsWith(github.ref, 'refs/tags')
        uses: softprops/action-gh-release@v1
        with:
          body_path: CHANGELOG
          token: ${{ secrets.TOKEN }}
          files: src-tauri/target/release/bundle/deb/*.deb
      - name: Upload Release
        if: startsWith(github.ref, 'refs/tags')
        uses: softprops/action-gh-release@v1
        with:
          body_path: CHANGELOG
          token: ${{ secrets.TOKEN }}
          files: src-tauri/target/release/bundle/appimage/*.AppImage*

  build-for-arm:
    needs: change-version
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest]
        target: [aarch64-unknown-linux-gnu, armv7-unknown-linux-gnueabihf]
        include:
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            toolchain: stable-aarch64-unknown-linux-gnu
            architecture: arm64
          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            toolchain: stable-armv7-unknown-linux-gnueabihf
            architecture: armhf
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: source
      - name: Setup Nodejs
        uses: actions/setup-node@v3
        with:
          node-version: 19
      - name: Install Rust Stable
        uses: dtolnay/rust-toolchain@stable
      - name: install dependencies
        run: |
          rustup target add ${{ matrix.target }}
          rustup toolchain install --force-non-host ${{ matrix.toolchain }}
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Setup apt architecture for arm packages
        run: |-
          # cat << EOF | sudo tee -a /etc/apt/sources.list
          # deb [arch=arm64,armhf] http://ports.ubuntu.com/ jammy main restricted
          # deb [arch=arm64,armhf] http://ports.ubuntu.com/ jammy-updates main restricted
          # deb [arch=arm64,armhf] http://ports.ubuntu.com/ jammy universe
          # deb [arch=arm64,armhf] http://ports.ubuntu.com/ jammy-updates universe
          # deb [arch=arm64,armhf] http://ports.ubuntu.com/ jammy multiverse
          # deb [arch=arm64,armhf] http://ports.ubuntu.com/ jammy-updates multiverse
          # deb [arch=arm64,armhf] http://ports.ubuntu.com/ jammy-backports main restricted universe multiverse   
          # EOF
          # cat /etc/apt/sources.list
          # https://github.com/cross-rs/cross/blob/main/docker/common.sh#L13-L14
          sed 's/http:\/\/\(.*\).ubuntu.com\/ubuntu\//[arch-=amd64,i386] http:\/\/ports.ubuntu.com\/ubuntu-ports\//g' /etc/apt/sources.list | sudo tee /etc/apt/sources.list.d/ports.list
          sudo sed -i 's/http:\/\/\(.*\).ubuntu.com\/ubuntu\//[arch=amd64,i386] http:\/\/\1.archive.ubuntu.com\/ubuntu\//g' /etc/apt/sources.list
      - name: Install Dependencies
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo dpkg --add-architecture ${{ matrix.architecture }}
          sudo apt update
          # fix install failures
          # sudo apt install -y libstdc++-11-dev-armhf-cross:arm64 libgcc-11-dev-armhf-cross:arm64
          # g++-aarch64-linux-gnu, Package 'g++-aarch64-linux-gnu' has no installation candidate
          sudo apt install -y libncurses6:arm64 libtinfo6:arm64 linux-libc-dev:arm64 libncursesw6:arm64 libssl3:arm64 libcups2:arm64
          sudo apt install -y --no-install-recommends \
            g++-aarch64-linux-gnu \
            libc6-dev-${{ matrix.architecture }}-cross \
            libssl-dev:${{ matrix.architecture }} \
            libwebkit2gtk-4.0-dev:${{ matrix.architecture }} \
            libgtk-3-dev:${{ matrix.architecture }} \
            patchelf:${{ matrix.architecture }} \
            librsvg2-dev:${{ matrix.architecture }}
          sudo apt install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf libxdo-dev libxcb1 libxrandr2 libdbus-1-3
          cargo install tauri-cli --git https://github.com/tauri-apps/tauri
          which cargo
          cargo --version
      - name: Install Dependencies
        if: matrix.target == 'armv7-unknown-linux-gnueabihf'
        run: |
          sudo dpkg --add-architecture ${{ matrix.architecture }} 
          # ignore Failed to fetch http://azure.archive.ubuntu.com/ubuntu/dists/jammy-security/main/binary-armhf/Packages  404  Not Found
          sudo apt update
          # fix install failures
          # sudo apt install -y libstdc++-11-dev-armhf-cross:arm64 libgcc-11-dev-armhf-cross:arm64
          # g++-arm-linux-gnueabihf depends g++-11-arm-linux-gnueabihf:arm64 : Depends: libstdc++-11-dev-armhf-cross:arm64 (>= 11) but it is not installable
          sudo apt install -y libncurses6:armhf libtinfo6:armhf linux-libc-dev:armhf libncursesw6:armhf libssl3:armhf libcups2:armhf
          sudo apt install -y --no-install-recommends \
            g++-arm-linux-gnueabihf \
            libc6-dev-${{ matrix.architecture }}-cross \
            libssl-dev:${{ matrix.architecture }} \
            libwebkit2gtk-4.0-dev:${{ matrix.architecture }} \
            libgtk-3-dev:${{ matrix.architecture }} \
            patchelf:${{ matrix.architecture }} \
            librsvg2-dev:${{ matrix.architecture }}
          sudo apt install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf libxdo-dev libxcb1 libxrandr2 libdbus-1-3
          cargo install tauri-cli --git https://github.com/tauri-apps/tauri
          which cargo
          cargo --version
      - name: Install Dependencies
        run: pnpm install
      - name: Code Format
        run: pnpm prettier --write .
      - name: Build and Package
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          export TAURI_PRIVATE_KEY="${{ secrets.TAURI_PRIVATE_KEY }}"
          export TAURI_KEY_PASSWORD="${{ secrets.TAURI_KEY_PASSWORD }}"
          export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
          export CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc
          export CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++
          export PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig
          export PKG_CONFIG_ALLOW_CROSS=1
          cargo tauri build --target ${{ matrix.target }} -b deb
      - name: Build and Package
        if: matrix.target == 'armv7-unknown-linux-gnueabihf'
        run: |
          export TAURI_PRIVATE_KEY="${{ secrets.TAURI_PRIVATE_KEY }}"
          export TAURI_KEY_PASSWORD="${{ secrets.TAURI_KEY_PASSWORD }}"
          export CARGO_TARGET_ARMV7_UNKNOWN_LINUX_GNUEABIHF_LINKER=arm-linux-gnueabihf-gcc
          export CC_armv7_unknown_linux_gnueabihf=arm-linux-gnueabihf-gcc
          export CXX_armv7_unknown_linux_gnueabihf=arm-linux-gnueabihf-g++
          export PKG_CONFIG_PATH=/usr/lib/arm-linux-gnueabihf/pkgconfig
          export PKG_CONFIG_ALLOW_CROSS=1
          cargo tauri build --target ${{ matrix.target }} -b deb
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: pot_${{ matrix.target }}.deb
          path: src-tauri/target/${{ matrix.target }}/release/bundle/deb/*.deb
          if-no-files-found: error
      - name: Upload Release
        if: startsWith(github.ref, 'refs/tags')
        uses: softprops/action-gh-release@v1
        with:
          body_path: CHANGELOG
          token: ${{ secrets.TOKEN }}
          files: src-tauri/target/${{ matrix.target }}/release/bundle/deb/*.deb

  release-update:
    needs: [build-for-macos, build-for-deepin, build-for-windows, build-for-linux]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install git
        run: |
          sudo apt-get update
          sudo apt-get install -y git

      - name: Get Tag Name
        run: |
          echo "VERSION=$(git describe --tags | sed 's/\([^-]*-g\)/r\1/;s/-/./g' | sed 's/.r.*//g')" >> $GITHUB_ENV
          echo "VERSION=$(git describe --tags | sed 's/\([^-]*-g\)/r\1/;s/-/./g' | sed 's/.r.*//g')"

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: pnpm install
        run: pnpm install

      - name: Release updater file
        run: pnpm run updater
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}

      - name: Upload Release
        uses: softprops/action-gh-release@v1
        with:
          body: ${{env.VERSION}}
          tag_name: updater
          token: ${{ secrets.TOKEN }}
          files: update.json
